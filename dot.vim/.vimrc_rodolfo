" +------------------------------------------------+
" .vimrc pessoal
" Author: Jorge Pereira <jpereiran@gmail.com>
" Last Change: Fri 07 Dec 2012 03:02:08 PM BRST
" +------------------------------------------------+

"coloca a data tipo Ter 26/Out/2004 hs 10:53 na linha atual
iab ,d <C-R>=strftime("%a %d/%b/%Y hs %H:%M")<CR>
iab ,m <jpereiran@gmail.com>

set textwidth=0
set title
set titlestring=%<Nome=%t%m%r%h%w
\%=
\BUFFER=%n
\%(\ %a%)
\%28([]))


" =============== DATA AUTOMÁTICA ===========================
" insira na em seus arquivos =   "ultima modificação:"
" em qualquer das três primeiras linhas
fun! SetDate()
   mark z
   if getline(1) =~ ".*ultima modificação:" ||
                           \ getline(2) =~ ".*ultima modificação:"  ||
                           \ getline(3) =~ ".*ultima modificação:"  ||
                           \ getline(4) =~ ".*ultima modificação:"  ||
                           \ getline(5) =~ ".*ultima modificação:"
      exec "1,5s/\s*ultima modificação: .*$/ultima modificação: " .
strftime("%c") . "/"
   endif
   exec "'z"
endfun

"  abaixo a chamada a função de data que é chamada toda vez que você
"  salva um arquivo preexistente

fun! LastChange()
   mark z
   if getline(1) =~ ".*Last Change:" ||
                           \ getline(2) =~ ".*Last Change:"  ||
                           \ getline(3) =~ ".*Last Change:"  ||
                           \ getline(4) =~ ".*Last Change:"  ||
                           \ getline(5) =~ ".*Last Change:"
      exec "1,5s/\s*Last Change: .*$/Last Change: " . strftime("%c") . "/"
   endif
   exec "'z"
endfun
" coloquei duas opções (alteração e modificação), assim
" não tem perigo de você esquecer e o sistema
" não atualizar a data do salvamento, outra melhoria na função
" é que agora é válida para qualquer tipo de arquivo. se usar
" num html por exemplo insira um começo de comentário na linha
" da data e feche o comentário na próxima linha

"  abaixo a chamada a função de data que é chamada toda vez que você
"  salva um arquivo preexistente
au BufWritePre * call SetDate()
au BufWritePre * call LastChange()

"============ Fim da Data Automática ===================

" === Cria um registro de alterações de arquivo ========
" ChangeLog entry convenience
" Função para inserir um status do arquivo
" cirado: data de criação, alteração, autor etc
fun! InsertChangeLog()
    normal(1G)
    call append(0, "Arquivo")
    call append(1, "Criado: " . strftime("%a %d/%b/%Y hs %H:%M"))
    call append(2, "ultima modificação: " . strftime("%a %d/%b/%Y hs %H:%M"))
    call append(3, "Autor: Jorge Pereira <jpereiran@gmail.com>")
    normal($)
endfun
map ,cl :call InsertChangeLog()<cr>A

" Cria um cabeçalho para scripts bash
fun! InsertHeadBash()
    normal(1G)
    call append(0, "#!bin/bash")
    call append(1, "# Criado em:" . strftime("%a %d/%b/%Y hs %H:%M"))
    call append(2, "# ultima modificação:" . strftime("%a %d/%b/%Y hs %H:%M"))
    call append(3, "# Departamento Estadual de Trânsito - DETRAN/CE")
    call append(3, "# Propósito do script")
    normal($)
endfun
map ,sh :call InsertHeadBash()<cr>A

" Remove Ctrl+M do final de linhas do DOS
" get rid of
if has("user_commands")
  " remove ^M from the file
  com! RemoveCtrlM :%s/^M/\r/g
  " change to directory of current file
  com! CD cd %:p:h
endif

" Ao editar um arquivo será aberto no ultimo ponto em
" que foi editado
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
"
set encoding=iso-8859-1

" Syntax Highlight
syntax enable

"fundo preto
set bg=dark

" 4 spaces for indenting
set shiftwidth=4

" 4 stops
set tabstop=4

call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" Give a shortcut key to NERD Tree
map <F5> :NERDTreeToggle<CR>

" Spaces instead of tabs
"set expandtab

" Always  set auto indenting on
set autoindent

" select when using the mouse
set selectmode=mouse

set mouse=a

" Line Numbers
set nu

" Comments color
highlight Comment ctermfg=green

" Blocket Platform
au BufNewFile,BufRead bconf.txt.* set filetype=cfg
au BufNewFile,BufRead *.tmpl set filetype=html

" Makefile: ele adora usar linhas compridas malas
au BufNewFile,BufRead Makefile set tw=0

set tags=tags;/
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" Move linhas ou blocos usando ALT+SETA
nnoremap <A-DOWN> mz:m+<CR>`z==
nnoremap <A-UP> mz:m-2<CR>`z==
inoremap <A-DOWN> <Esc>:m+<CR>==gi
inoremap <A-UP> <Esc>:m-2<CR>==gi
vnoremap <A-DOWN> :m'>+<CR>gv=`<my`>mzgv`yo`z
vnoremap <A-UP> :m'<-2<CR>gv=`>my`<mzgv`yo`z

" Deleta linha com CTRL+D
noremap <C-D> dd
vnoremap <C-D> <C-C>dd
inoremap <C-D> <C-O>dd

" Organiza identação de um bloco selecionado com CTRL+ALT+F
noremap <C-A-F> ==
vnoremap <C-A-F> <C-Q>==
inoremap <C-A-F> <C-O>==

" Command-line com CTRL+ALT+C
noremap <C-A-C> :
vnoremap <C-A-C> <C-Q>:
inoremap <C-A-C> <C-O>:

" Busca com CTRL+F
noremap <C-F> /
vnoremap <C-F> <C-Q>/
inoremap <C-F> <C-O>/

" Abre arquivos com CTRL+O
noremap <C-O> :tabnew 
vnoremap <C-O> <C-Q>:tabnew 
inoremap <C-O> <C-O>:tabnew 

" Função que usa o omnicomplete apenas com o CTRL+SPACE
inoremap <C-SPACE> <C-X><C-O>
filetype plugin on

" Fechamento automático de parênteses
imap { {}<left>
imap ( ()<left>
imap [ []<left>

"""""""""""""""""""""""""""""
" Atalhos comuns de teclado "
"""""""""""""""""""""""""""""

" Permite selecionar com SHIFT + SETA como no Windows
set selectmode=mouse,key
set mousemodel=popup
set keymodel=startsel,stopsel
set selection=exclusive

" Backspace no modo de visão apaga a seleção
vnoremap <BS> d

" CTRL-X e SHIFT-Del corta
"vnoremap <C-x> "+x
"vnoremap <S-Del> "+x

" CTRL-C e CTRL-Insert copia
"vnoremap <C-c> "+y
"vnoremap <C-Insert> "+y

" CTRL-V e SHIFT-Insert cola
"noremap <C-V>        "+gP
"noremap <S-Insert>   "+gP
"inoremap <C-V>       <C-O>:set nosi<CR><C-R>+<C-O>:set si<CR>
"inoremap <S-Insert>  <C-R>+
"cnoremap <C-V>       <C-O>:set nosi<CR><C-R>+<C-O>:set si<CR>
"cnoremap <S-Insert>  <C-R>+

" CTRL-S salva
"noremap <C-S>  :update<CR>
"vnoremap <C-S> <C-C>:update<CR>
"inoremap <C-S> <C-O>:update<CR>

" CTRL-Z desfaz
noremap <C-Z> u
vnoremap <C-Z> <C-C>u
inoremap <C-Z> <C-O>u

" CTRL-Y refaz
noremap <C-Y> <C-R>
inoremap <C-Y> <C-O><C-R>

" CTRL-A seleciona tudo
noremap <C-A> gggH<C-O>G
inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
cnoremap <C-A> <C-C>gggH<C-O>G
onoremap <C-A> <C-C>gggH<C-O>G
snoremap <C-A> <C-C>gggH<C-O>G
xnoremap <C-A> <C-C>ggVG

" CTRL-F4 fecha a janela
noremap <C-F4> <C-W>c
inoremap <C-F4> <C-O><C-W>c
cnoremap <C-F4> <C-C><C-W>c
onoremap <C-F4> <C-C><C-W>c

function! FindBconfKey()
    let key = expand("<cWORD>")
    let key = substitute(key, "[^a-zA-Z0-9._]\\+", "", "g")
    echo "Searching: " . key 
    let options = split(system("grep -n " . key . " $(find conf/bconf/ -type f -name bconf\\.* \| grep -v '/\\.svn/')"), "\n")
    if len(options) == 0
        echo "No results found!"
        return
    endif
    let num_options = []
    for line in options 
        call add(num_options, ((len(num_options) + 1) . " " . line) )
    endfor
    let answer = input(join(num_options, "\n") . "\n")
    if !empty(answer)
        let selected = split(options[answer - 1], ":")
        execute "tabe " . selected[0]
        execute ":" . selected[1]
    endif
endfunction
noremap <C-b> :call FindBconfKey() <CR>

set wrap

